
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Bookings` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Bookings
 * 
 */
export type BookingsModel = runtime.Types.Result.DefaultSelection<Prisma.$BookingsPayload>

export type AggregateBookings = {
  _count: BookingsCountAggregateOutputType | null
  _min: BookingsMinAggregateOutputType | null
  _max: BookingsMaxAggregateOutputType | null
}

export type BookingsMinAggregateOutputType = {
  id: string | null
  serviceId: string | null
  clientId: string | null
  status: $Enums.BookingStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BookingsMaxAggregateOutputType = {
  id: string | null
  serviceId: string | null
  clientId: string | null
  status: $Enums.BookingStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BookingsCountAggregateOutputType = {
  id: number
  serviceId: number
  clientId: number
  status: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type BookingsMinAggregateInputType = {
  id?: true
  serviceId?: true
  clientId?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type BookingsMaxAggregateInputType = {
  id?: true
  serviceId?: true
  clientId?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type BookingsCountAggregateInputType = {
  id?: true
  serviceId?: true
  clientId?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type BookingsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Bookings to aggregate.
   */
  where?: Prisma.BookingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Bookings to fetch.
   */
  orderBy?: Prisma.BookingsOrderByWithRelationInput | Prisma.BookingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BookingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Bookings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Bookings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Bookings
  **/
  _count?: true | BookingsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BookingsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BookingsMaxAggregateInputType
}

export type GetBookingsAggregateType<T extends BookingsAggregateArgs> = {
      [P in keyof T & keyof AggregateBookings]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBookings[P]>
    : Prisma.GetScalarType<T[P], AggregateBookings[P]>
}




export type BookingsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BookingsWhereInput
  orderBy?: Prisma.BookingsOrderByWithAggregationInput | Prisma.BookingsOrderByWithAggregationInput[]
  by: Prisma.BookingsScalarFieldEnum[] | Prisma.BookingsScalarFieldEnum
  having?: Prisma.BookingsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BookingsCountAggregateInputType | true
  _min?: BookingsMinAggregateInputType
  _max?: BookingsMaxAggregateInputType
}

export type BookingsGroupByOutputType = {
  id: string
  serviceId: string
  clientId: string
  status: $Enums.BookingStatus
  createdAt: Date
  updatedAt: Date
  _count: BookingsCountAggregateOutputType | null
  _min: BookingsMinAggregateOutputType | null
  _max: BookingsMaxAggregateOutputType | null
}

type GetBookingsGroupByPayload<T extends BookingsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BookingsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BookingsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BookingsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BookingsGroupByOutputType[P]>
      }
    >
  >



export type BookingsWhereInput = {
  AND?: Prisma.BookingsWhereInput | Prisma.BookingsWhereInput[]
  OR?: Prisma.BookingsWhereInput[]
  NOT?: Prisma.BookingsWhereInput | Prisma.BookingsWhereInput[]
  id?: Prisma.StringFilter<"Bookings"> | string
  serviceId?: Prisma.StringFilter<"Bookings"> | string
  clientId?: Prisma.StringFilter<"Bookings"> | string
  status?: Prisma.EnumBookingStatusFilter<"Bookings"> | $Enums.BookingStatus
  createdAt?: Prisma.DateTimeFilter<"Bookings"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Bookings"> | Date | string
  service?: Prisma.XOR<Prisma.ServicesScalarRelationFilter, Prisma.ServicesWhereInput>
  client?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.UsersWhereInput>
  history?: Prisma.BookingsHistoryListRelationFilter
}

export type BookingsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  service?: Prisma.ServicesOrderByWithRelationInput
  client?: Prisma.UsersOrderByWithRelationInput
  history?: Prisma.BookingsHistoryOrderByRelationAggregateInput
}

export type BookingsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.BookingsWhereInput | Prisma.BookingsWhereInput[]
  OR?: Prisma.BookingsWhereInput[]
  NOT?: Prisma.BookingsWhereInput | Prisma.BookingsWhereInput[]
  serviceId?: Prisma.StringFilter<"Bookings"> | string
  clientId?: Prisma.StringFilter<"Bookings"> | string
  status?: Prisma.EnumBookingStatusFilter<"Bookings"> | $Enums.BookingStatus
  createdAt?: Prisma.DateTimeFilter<"Bookings"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Bookings"> | Date | string
  service?: Prisma.XOR<Prisma.ServicesScalarRelationFilter, Prisma.ServicesWhereInput>
  client?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.UsersWhereInput>
  history?: Prisma.BookingsHistoryListRelationFilter
}, "id" | "id">

export type BookingsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.BookingsCountOrderByAggregateInput
  _max?: Prisma.BookingsMaxOrderByAggregateInput
  _min?: Prisma.BookingsMinOrderByAggregateInput
}

export type BookingsScalarWhereWithAggregatesInput = {
  AND?: Prisma.BookingsScalarWhereWithAggregatesInput | Prisma.BookingsScalarWhereWithAggregatesInput[]
  OR?: Prisma.BookingsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BookingsScalarWhereWithAggregatesInput | Prisma.BookingsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Bookings"> | string
  serviceId?: Prisma.StringWithAggregatesFilter<"Bookings"> | string
  clientId?: Prisma.StringWithAggregatesFilter<"Bookings"> | string
  status?: Prisma.EnumBookingStatusWithAggregatesFilter<"Bookings"> | $Enums.BookingStatus
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Bookings"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Bookings"> | Date | string
}

export type BookingsCreateInput = {
  id?: string
  status?: $Enums.BookingStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  service: Prisma.ServicesCreateNestedOneWithoutBookingsInput
  client: Prisma.UsersCreateNestedOneWithoutBookingsInput
  history?: Prisma.BookingsHistoryCreateNestedManyWithoutBookingInput
}

export type BookingsUncheckedCreateInput = {
  id?: string
  serviceId: string
  clientId: string
  status?: $Enums.BookingStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  history?: Prisma.BookingsHistoryUncheckedCreateNestedManyWithoutBookingInput
}

export type BookingsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  service?: Prisma.ServicesUpdateOneRequiredWithoutBookingsNestedInput
  client?: Prisma.UsersUpdateOneRequiredWithoutBookingsNestedInput
  history?: Prisma.BookingsHistoryUpdateManyWithoutBookingNestedInput
}

export type BookingsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  history?: Prisma.BookingsHistoryUncheckedUpdateManyWithoutBookingNestedInput
}

export type BookingsCreateManyInput = {
  id?: string
  serviceId: string
  clientId: string
  status?: $Enums.BookingStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BookingsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BookingsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BookingsListRelationFilter = {
  every?: Prisma.BookingsWhereInput
  some?: Prisma.BookingsWhereInput
  none?: Prisma.BookingsWhereInput
}

export type BookingsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type BookingsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BookingsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BookingsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BookingsScalarRelationFilter = {
  is?: Prisma.BookingsWhereInput
  isNot?: Prisma.BookingsWhereInput
}

export type BookingsCreateNestedManyWithoutClientInput = {
  create?: Prisma.XOR<Prisma.BookingsCreateWithoutClientInput, Prisma.BookingsUncheckedCreateWithoutClientInput> | Prisma.BookingsCreateWithoutClientInput[] | Prisma.BookingsUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.BookingsCreateOrConnectWithoutClientInput | Prisma.BookingsCreateOrConnectWithoutClientInput[]
  createMany?: Prisma.BookingsCreateManyClientInputEnvelope
  connect?: Prisma.BookingsWhereUniqueInput | Prisma.BookingsWhereUniqueInput[]
}

export type BookingsUncheckedCreateNestedManyWithoutClientInput = {
  create?: Prisma.XOR<Prisma.BookingsCreateWithoutClientInput, Prisma.BookingsUncheckedCreateWithoutClientInput> | Prisma.BookingsCreateWithoutClientInput[] | Prisma.BookingsUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.BookingsCreateOrConnectWithoutClientInput | Prisma.BookingsCreateOrConnectWithoutClientInput[]
  createMany?: Prisma.BookingsCreateManyClientInputEnvelope
  connect?: Prisma.BookingsWhereUniqueInput | Prisma.BookingsWhereUniqueInput[]
}

export type BookingsUpdateManyWithoutClientNestedInput = {
  create?: Prisma.XOR<Prisma.BookingsCreateWithoutClientInput, Prisma.BookingsUncheckedCreateWithoutClientInput> | Prisma.BookingsCreateWithoutClientInput[] | Prisma.BookingsUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.BookingsCreateOrConnectWithoutClientInput | Prisma.BookingsCreateOrConnectWithoutClientInput[]
  upsert?: Prisma.BookingsUpsertWithWhereUniqueWithoutClientInput | Prisma.BookingsUpsertWithWhereUniqueWithoutClientInput[]
  createMany?: Prisma.BookingsCreateManyClientInputEnvelope
  set?: Prisma.BookingsWhereUniqueInput | Prisma.BookingsWhereUniqueInput[]
  disconnect?: Prisma.BookingsWhereUniqueInput | Prisma.BookingsWhereUniqueInput[]
  delete?: Prisma.BookingsWhereUniqueInput | Prisma.BookingsWhereUniqueInput[]
  connect?: Prisma.BookingsWhereUniqueInput | Prisma.BookingsWhereUniqueInput[]
  update?: Prisma.BookingsUpdateWithWhereUniqueWithoutClientInput | Prisma.BookingsUpdateWithWhereUniqueWithoutClientInput[]
  updateMany?: Prisma.BookingsUpdateManyWithWhereWithoutClientInput | Prisma.BookingsUpdateManyWithWhereWithoutClientInput[]
  deleteMany?: Prisma.BookingsScalarWhereInput | Prisma.BookingsScalarWhereInput[]
}

export type BookingsUncheckedUpdateManyWithoutClientNestedInput = {
  create?: Prisma.XOR<Prisma.BookingsCreateWithoutClientInput, Prisma.BookingsUncheckedCreateWithoutClientInput> | Prisma.BookingsCreateWithoutClientInput[] | Prisma.BookingsUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.BookingsCreateOrConnectWithoutClientInput | Prisma.BookingsCreateOrConnectWithoutClientInput[]
  upsert?: Prisma.BookingsUpsertWithWhereUniqueWithoutClientInput | Prisma.BookingsUpsertWithWhereUniqueWithoutClientInput[]
  createMany?: Prisma.BookingsCreateManyClientInputEnvelope
  set?: Prisma.BookingsWhereUniqueInput | Prisma.BookingsWhereUniqueInput[]
  disconnect?: Prisma.BookingsWhereUniqueInput | Prisma.BookingsWhereUniqueInput[]
  delete?: Prisma.BookingsWhereUniqueInput | Prisma.BookingsWhereUniqueInput[]
  connect?: Prisma.BookingsWhereUniqueInput | Prisma.BookingsWhereUniqueInput[]
  update?: Prisma.BookingsUpdateWithWhereUniqueWithoutClientInput | Prisma.BookingsUpdateWithWhereUniqueWithoutClientInput[]
  updateMany?: Prisma.BookingsUpdateManyWithWhereWithoutClientInput | Prisma.BookingsUpdateManyWithWhereWithoutClientInput[]
  deleteMany?: Prisma.BookingsScalarWhereInput | Prisma.BookingsScalarWhereInput[]
}

export type BookingsCreateNestedManyWithoutServiceInput = {
  create?: Prisma.XOR<Prisma.BookingsCreateWithoutServiceInput, Prisma.BookingsUncheckedCreateWithoutServiceInput> | Prisma.BookingsCreateWithoutServiceInput[] | Prisma.BookingsUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.BookingsCreateOrConnectWithoutServiceInput | Prisma.BookingsCreateOrConnectWithoutServiceInput[]
  createMany?: Prisma.BookingsCreateManyServiceInputEnvelope
  connect?: Prisma.BookingsWhereUniqueInput | Prisma.BookingsWhereUniqueInput[]
}

export type BookingsUncheckedCreateNestedManyWithoutServiceInput = {
  create?: Prisma.XOR<Prisma.BookingsCreateWithoutServiceInput, Prisma.BookingsUncheckedCreateWithoutServiceInput> | Prisma.BookingsCreateWithoutServiceInput[] | Prisma.BookingsUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.BookingsCreateOrConnectWithoutServiceInput | Prisma.BookingsCreateOrConnectWithoutServiceInput[]
  createMany?: Prisma.BookingsCreateManyServiceInputEnvelope
  connect?: Prisma.BookingsWhereUniqueInput | Prisma.BookingsWhereUniqueInput[]
}

export type BookingsUpdateManyWithoutServiceNestedInput = {
  create?: Prisma.XOR<Prisma.BookingsCreateWithoutServiceInput, Prisma.BookingsUncheckedCreateWithoutServiceInput> | Prisma.BookingsCreateWithoutServiceInput[] | Prisma.BookingsUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.BookingsCreateOrConnectWithoutServiceInput | Prisma.BookingsCreateOrConnectWithoutServiceInput[]
  upsert?: Prisma.BookingsUpsertWithWhereUniqueWithoutServiceInput | Prisma.BookingsUpsertWithWhereUniqueWithoutServiceInput[]
  createMany?: Prisma.BookingsCreateManyServiceInputEnvelope
  set?: Prisma.BookingsWhereUniqueInput | Prisma.BookingsWhereUniqueInput[]
  disconnect?: Prisma.BookingsWhereUniqueInput | Prisma.BookingsWhereUniqueInput[]
  delete?: Prisma.BookingsWhereUniqueInput | Prisma.BookingsWhereUniqueInput[]
  connect?: Prisma.BookingsWhereUniqueInput | Prisma.BookingsWhereUniqueInput[]
  update?: Prisma.BookingsUpdateWithWhereUniqueWithoutServiceInput | Prisma.BookingsUpdateWithWhereUniqueWithoutServiceInput[]
  updateMany?: Prisma.BookingsUpdateManyWithWhereWithoutServiceInput | Prisma.BookingsUpdateManyWithWhereWithoutServiceInput[]
  deleteMany?: Prisma.BookingsScalarWhereInput | Prisma.BookingsScalarWhereInput[]
}

export type BookingsUncheckedUpdateManyWithoutServiceNestedInput = {
  create?: Prisma.XOR<Prisma.BookingsCreateWithoutServiceInput, Prisma.BookingsUncheckedCreateWithoutServiceInput> | Prisma.BookingsCreateWithoutServiceInput[] | Prisma.BookingsUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.BookingsCreateOrConnectWithoutServiceInput | Prisma.BookingsCreateOrConnectWithoutServiceInput[]
  upsert?: Prisma.BookingsUpsertWithWhereUniqueWithoutServiceInput | Prisma.BookingsUpsertWithWhereUniqueWithoutServiceInput[]
  createMany?: Prisma.BookingsCreateManyServiceInputEnvelope
  set?: Prisma.BookingsWhereUniqueInput | Prisma.BookingsWhereUniqueInput[]
  disconnect?: Prisma.BookingsWhereUniqueInput | Prisma.BookingsWhereUniqueInput[]
  delete?: Prisma.BookingsWhereUniqueInput | Prisma.BookingsWhereUniqueInput[]
  connect?: Prisma.BookingsWhereUniqueInput | Prisma.BookingsWhereUniqueInput[]
  update?: Prisma.BookingsUpdateWithWhereUniqueWithoutServiceInput | Prisma.BookingsUpdateWithWhereUniqueWithoutServiceInput[]
  updateMany?: Prisma.BookingsUpdateManyWithWhereWithoutServiceInput | Prisma.BookingsUpdateManyWithWhereWithoutServiceInput[]
  deleteMany?: Prisma.BookingsScalarWhereInput | Prisma.BookingsScalarWhereInput[]
}

export type EnumBookingStatusFieldUpdateOperationsInput = {
  set?: $Enums.BookingStatus
}

export type BookingsCreateNestedOneWithoutHistoryInput = {
  create?: Prisma.XOR<Prisma.BookingsCreateWithoutHistoryInput, Prisma.BookingsUncheckedCreateWithoutHistoryInput>
  connectOrCreate?: Prisma.BookingsCreateOrConnectWithoutHistoryInput
  connect?: Prisma.BookingsWhereUniqueInput
}

export type BookingsUpdateOneRequiredWithoutHistoryNestedInput = {
  create?: Prisma.XOR<Prisma.BookingsCreateWithoutHistoryInput, Prisma.BookingsUncheckedCreateWithoutHistoryInput>
  connectOrCreate?: Prisma.BookingsCreateOrConnectWithoutHistoryInput
  upsert?: Prisma.BookingsUpsertWithoutHistoryInput
  connect?: Prisma.BookingsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.BookingsUpdateToOneWithWhereWithoutHistoryInput, Prisma.BookingsUpdateWithoutHistoryInput>, Prisma.BookingsUncheckedUpdateWithoutHistoryInput>
}

export type BookingsCreateWithoutClientInput = {
  id?: string
  status?: $Enums.BookingStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  service: Prisma.ServicesCreateNestedOneWithoutBookingsInput
  history?: Prisma.BookingsHistoryCreateNestedManyWithoutBookingInput
}

export type BookingsUncheckedCreateWithoutClientInput = {
  id?: string
  serviceId: string
  status?: $Enums.BookingStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  history?: Prisma.BookingsHistoryUncheckedCreateNestedManyWithoutBookingInput
}

export type BookingsCreateOrConnectWithoutClientInput = {
  where: Prisma.BookingsWhereUniqueInput
  create: Prisma.XOR<Prisma.BookingsCreateWithoutClientInput, Prisma.BookingsUncheckedCreateWithoutClientInput>
}

export type BookingsCreateManyClientInputEnvelope = {
  data: Prisma.BookingsCreateManyClientInput | Prisma.BookingsCreateManyClientInput[]
  skipDuplicates?: boolean
}

export type BookingsUpsertWithWhereUniqueWithoutClientInput = {
  where: Prisma.BookingsWhereUniqueInput
  update: Prisma.XOR<Prisma.BookingsUpdateWithoutClientInput, Prisma.BookingsUncheckedUpdateWithoutClientInput>
  create: Prisma.XOR<Prisma.BookingsCreateWithoutClientInput, Prisma.BookingsUncheckedCreateWithoutClientInput>
}

export type BookingsUpdateWithWhereUniqueWithoutClientInput = {
  where: Prisma.BookingsWhereUniqueInput
  data: Prisma.XOR<Prisma.BookingsUpdateWithoutClientInput, Prisma.BookingsUncheckedUpdateWithoutClientInput>
}

export type BookingsUpdateManyWithWhereWithoutClientInput = {
  where: Prisma.BookingsScalarWhereInput
  data: Prisma.XOR<Prisma.BookingsUpdateManyMutationInput, Prisma.BookingsUncheckedUpdateManyWithoutClientInput>
}

export type BookingsScalarWhereInput = {
  AND?: Prisma.BookingsScalarWhereInput | Prisma.BookingsScalarWhereInput[]
  OR?: Prisma.BookingsScalarWhereInput[]
  NOT?: Prisma.BookingsScalarWhereInput | Prisma.BookingsScalarWhereInput[]
  id?: Prisma.StringFilter<"Bookings"> | string
  serviceId?: Prisma.StringFilter<"Bookings"> | string
  clientId?: Prisma.StringFilter<"Bookings"> | string
  status?: Prisma.EnumBookingStatusFilter<"Bookings"> | $Enums.BookingStatus
  createdAt?: Prisma.DateTimeFilter<"Bookings"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Bookings"> | Date | string
}

export type BookingsCreateWithoutServiceInput = {
  id?: string
  status?: $Enums.BookingStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  client: Prisma.UsersCreateNestedOneWithoutBookingsInput
  history?: Prisma.BookingsHistoryCreateNestedManyWithoutBookingInput
}

export type BookingsUncheckedCreateWithoutServiceInput = {
  id?: string
  clientId: string
  status?: $Enums.BookingStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  history?: Prisma.BookingsHistoryUncheckedCreateNestedManyWithoutBookingInput
}

export type BookingsCreateOrConnectWithoutServiceInput = {
  where: Prisma.BookingsWhereUniqueInput
  create: Prisma.XOR<Prisma.BookingsCreateWithoutServiceInput, Prisma.BookingsUncheckedCreateWithoutServiceInput>
}

export type BookingsCreateManyServiceInputEnvelope = {
  data: Prisma.BookingsCreateManyServiceInput | Prisma.BookingsCreateManyServiceInput[]
  skipDuplicates?: boolean
}

export type BookingsUpsertWithWhereUniqueWithoutServiceInput = {
  where: Prisma.BookingsWhereUniqueInput
  update: Prisma.XOR<Prisma.BookingsUpdateWithoutServiceInput, Prisma.BookingsUncheckedUpdateWithoutServiceInput>
  create: Prisma.XOR<Prisma.BookingsCreateWithoutServiceInput, Prisma.BookingsUncheckedCreateWithoutServiceInput>
}

export type BookingsUpdateWithWhereUniqueWithoutServiceInput = {
  where: Prisma.BookingsWhereUniqueInput
  data: Prisma.XOR<Prisma.BookingsUpdateWithoutServiceInput, Prisma.BookingsUncheckedUpdateWithoutServiceInput>
}

export type BookingsUpdateManyWithWhereWithoutServiceInput = {
  where: Prisma.BookingsScalarWhereInput
  data: Prisma.XOR<Prisma.BookingsUpdateManyMutationInput, Prisma.BookingsUncheckedUpdateManyWithoutServiceInput>
}

export type BookingsCreateWithoutHistoryInput = {
  id?: string
  status?: $Enums.BookingStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  service: Prisma.ServicesCreateNestedOneWithoutBookingsInput
  client: Prisma.UsersCreateNestedOneWithoutBookingsInput
}

export type BookingsUncheckedCreateWithoutHistoryInput = {
  id?: string
  serviceId: string
  clientId: string
  status?: $Enums.BookingStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BookingsCreateOrConnectWithoutHistoryInput = {
  where: Prisma.BookingsWhereUniqueInput
  create: Prisma.XOR<Prisma.BookingsCreateWithoutHistoryInput, Prisma.BookingsUncheckedCreateWithoutHistoryInput>
}

export type BookingsUpsertWithoutHistoryInput = {
  update: Prisma.XOR<Prisma.BookingsUpdateWithoutHistoryInput, Prisma.BookingsUncheckedUpdateWithoutHistoryInput>
  create: Prisma.XOR<Prisma.BookingsCreateWithoutHistoryInput, Prisma.BookingsUncheckedCreateWithoutHistoryInput>
  where?: Prisma.BookingsWhereInput
}

export type BookingsUpdateToOneWithWhereWithoutHistoryInput = {
  where?: Prisma.BookingsWhereInput
  data: Prisma.XOR<Prisma.BookingsUpdateWithoutHistoryInput, Prisma.BookingsUncheckedUpdateWithoutHistoryInput>
}

export type BookingsUpdateWithoutHistoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  service?: Prisma.ServicesUpdateOneRequiredWithoutBookingsNestedInput
  client?: Prisma.UsersUpdateOneRequiredWithoutBookingsNestedInput
}

export type BookingsUncheckedUpdateWithoutHistoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BookingsCreateManyClientInput = {
  id?: string
  serviceId: string
  status?: $Enums.BookingStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BookingsUpdateWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  service?: Prisma.ServicesUpdateOneRequiredWithoutBookingsNestedInput
  history?: Prisma.BookingsHistoryUpdateManyWithoutBookingNestedInput
}

export type BookingsUncheckedUpdateWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  history?: Prisma.BookingsHistoryUncheckedUpdateManyWithoutBookingNestedInput
}

export type BookingsUncheckedUpdateManyWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BookingsCreateManyServiceInput = {
  id?: string
  clientId: string
  status?: $Enums.BookingStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BookingsUpdateWithoutServiceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client?: Prisma.UsersUpdateOneRequiredWithoutBookingsNestedInput
  history?: Prisma.BookingsHistoryUpdateManyWithoutBookingNestedInput
}

export type BookingsUncheckedUpdateWithoutServiceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  history?: Prisma.BookingsHistoryUncheckedUpdateManyWithoutBookingNestedInput
}

export type BookingsUncheckedUpdateManyWithoutServiceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type BookingsCountOutputType
 */

export type BookingsCountOutputType = {
  history: number
}

export type BookingsCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  history?: boolean | BookingsCountOutputTypeCountHistoryArgs
}

/**
 * BookingsCountOutputType without action
 */
export type BookingsCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BookingsCountOutputType
   */
  select?: Prisma.BookingsCountOutputTypeSelect<ExtArgs> | null
}

/**
 * BookingsCountOutputType without action
 */
export type BookingsCountOutputTypeCountHistoryArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BookingsHistoryWhereInput
}


export type BookingsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  serviceId?: boolean
  clientId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  service?: boolean | Prisma.ServicesDefaultArgs<ExtArgs>
  client?: boolean | Prisma.UsersDefaultArgs<ExtArgs>
  history?: boolean | Prisma.Bookings$historyArgs<ExtArgs>
  _count?: boolean | Prisma.BookingsCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["bookings"]>

export type BookingsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  serviceId?: boolean
  clientId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  service?: boolean | Prisma.ServicesDefaultArgs<ExtArgs>
  client?: boolean | Prisma.UsersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["bookings"]>

export type BookingsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  serviceId?: boolean
  clientId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  service?: boolean | Prisma.ServicesDefaultArgs<ExtArgs>
  client?: boolean | Prisma.UsersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["bookings"]>

export type BookingsSelectScalar = {
  id?: boolean
  serviceId?: boolean
  clientId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type BookingsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "serviceId" | "clientId" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["bookings"]>
export type BookingsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  service?: boolean | Prisma.ServicesDefaultArgs<ExtArgs>
  client?: boolean | Prisma.UsersDefaultArgs<ExtArgs>
  history?: boolean | Prisma.Bookings$historyArgs<ExtArgs>
  _count?: boolean | Prisma.BookingsCountOutputTypeDefaultArgs<ExtArgs>
}
export type BookingsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  service?: boolean | Prisma.ServicesDefaultArgs<ExtArgs>
  client?: boolean | Prisma.UsersDefaultArgs<ExtArgs>
}
export type BookingsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  service?: boolean | Prisma.ServicesDefaultArgs<ExtArgs>
  client?: boolean | Prisma.UsersDefaultArgs<ExtArgs>
}

export type $BookingsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Bookings"
  objects: {
    service: Prisma.$ServicesPayload<ExtArgs>
    client: Prisma.$UsersPayload<ExtArgs>
    history: Prisma.$BookingsHistoryPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    serviceId: string
    clientId: string
    status: $Enums.BookingStatus
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["bookings"]>
  composites: {}
}

export type BookingsGetPayload<S extends boolean | null | undefined | BookingsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BookingsPayload, S>

export type BookingsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BookingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BookingsCountAggregateInputType | true
  }

export interface BookingsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bookings'], meta: { name: 'Bookings' } }
  /**
   * Find zero or one Bookings that matches the filter.
   * @param {BookingsFindUniqueArgs} args - Arguments to find a Bookings
   * @example
   * // Get one Bookings
   * const bookings = await prisma.bookings.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BookingsFindUniqueArgs>(args: Prisma.SelectSubset<T, BookingsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BookingsClient<runtime.Types.Result.GetResult<Prisma.$BookingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Bookings that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BookingsFindUniqueOrThrowArgs} args - Arguments to find a Bookings
   * @example
   * // Get one Bookings
   * const bookings = await prisma.bookings.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BookingsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BookingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BookingsClient<runtime.Types.Result.GetResult<Prisma.$BookingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Bookings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingsFindFirstArgs} args - Arguments to find a Bookings
   * @example
   * // Get one Bookings
   * const bookings = await prisma.bookings.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BookingsFindFirstArgs>(args?: Prisma.SelectSubset<T, BookingsFindFirstArgs<ExtArgs>>): Prisma.Prisma__BookingsClient<runtime.Types.Result.GetResult<Prisma.$BookingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Bookings that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingsFindFirstOrThrowArgs} args - Arguments to find a Bookings
   * @example
   * // Get one Bookings
   * const bookings = await prisma.bookings.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BookingsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BookingsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BookingsClient<runtime.Types.Result.GetResult<Prisma.$BookingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Bookings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Bookings
   * const bookings = await prisma.bookings.findMany()
   * 
   * // Get first 10 Bookings
   * const bookings = await prisma.bookings.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const bookingsWithIdOnly = await prisma.bookings.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BookingsFindManyArgs>(args?: Prisma.SelectSubset<T, BookingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BookingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Bookings.
   * @param {BookingsCreateArgs} args - Arguments to create a Bookings.
   * @example
   * // Create one Bookings
   * const Bookings = await prisma.bookings.create({
   *   data: {
   *     // ... data to create a Bookings
   *   }
   * })
   * 
   */
  create<T extends BookingsCreateArgs>(args: Prisma.SelectSubset<T, BookingsCreateArgs<ExtArgs>>): Prisma.Prisma__BookingsClient<runtime.Types.Result.GetResult<Prisma.$BookingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Bookings.
   * @param {BookingsCreateManyArgs} args - Arguments to create many Bookings.
   * @example
   * // Create many Bookings
   * const bookings = await prisma.bookings.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BookingsCreateManyArgs>(args?: Prisma.SelectSubset<T, BookingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Bookings and returns the data saved in the database.
   * @param {BookingsCreateManyAndReturnArgs} args - Arguments to create many Bookings.
   * @example
   * // Create many Bookings
   * const bookings = await prisma.bookings.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Bookings and only return the `id`
   * const bookingsWithIdOnly = await prisma.bookings.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BookingsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BookingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BookingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Bookings.
   * @param {BookingsDeleteArgs} args - Arguments to delete one Bookings.
   * @example
   * // Delete one Bookings
   * const Bookings = await prisma.bookings.delete({
   *   where: {
   *     // ... filter to delete one Bookings
   *   }
   * })
   * 
   */
  delete<T extends BookingsDeleteArgs>(args: Prisma.SelectSubset<T, BookingsDeleteArgs<ExtArgs>>): Prisma.Prisma__BookingsClient<runtime.Types.Result.GetResult<Prisma.$BookingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Bookings.
   * @param {BookingsUpdateArgs} args - Arguments to update one Bookings.
   * @example
   * // Update one Bookings
   * const bookings = await prisma.bookings.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BookingsUpdateArgs>(args: Prisma.SelectSubset<T, BookingsUpdateArgs<ExtArgs>>): Prisma.Prisma__BookingsClient<runtime.Types.Result.GetResult<Prisma.$BookingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Bookings.
   * @param {BookingsDeleteManyArgs} args - Arguments to filter Bookings to delete.
   * @example
   * // Delete a few Bookings
   * const { count } = await prisma.bookings.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BookingsDeleteManyArgs>(args?: Prisma.SelectSubset<T, BookingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Bookings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Bookings
   * const bookings = await prisma.bookings.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BookingsUpdateManyArgs>(args: Prisma.SelectSubset<T, BookingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Bookings and returns the data updated in the database.
   * @param {BookingsUpdateManyAndReturnArgs} args - Arguments to update many Bookings.
   * @example
   * // Update many Bookings
   * const bookings = await prisma.bookings.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Bookings and only return the `id`
   * const bookingsWithIdOnly = await prisma.bookings.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BookingsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BookingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BookingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Bookings.
   * @param {BookingsUpsertArgs} args - Arguments to update or create a Bookings.
   * @example
   * // Update or create a Bookings
   * const bookings = await prisma.bookings.upsert({
   *   create: {
   *     // ... data to create a Bookings
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Bookings we want to update
   *   }
   * })
   */
  upsert<T extends BookingsUpsertArgs>(args: Prisma.SelectSubset<T, BookingsUpsertArgs<ExtArgs>>): Prisma.Prisma__BookingsClient<runtime.Types.Result.GetResult<Prisma.$BookingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Bookings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingsCountArgs} args - Arguments to filter Bookings to count.
   * @example
   * // Count the number of Bookings
   * const count = await prisma.bookings.count({
   *   where: {
   *     // ... the filter for the Bookings we want to count
   *   }
   * })
  **/
  count<T extends BookingsCountArgs>(
    args?: Prisma.Subset<T, BookingsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BookingsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Bookings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BookingsAggregateArgs>(args: Prisma.Subset<T, BookingsAggregateArgs>): Prisma.PrismaPromise<GetBookingsAggregateType<T>>

  /**
   * Group by Bookings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BookingsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BookingsGroupByArgs['orderBy'] }
      : { orderBy?: BookingsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BookingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Bookings model
 */
readonly fields: BookingsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Bookings.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BookingsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  service<T extends Prisma.ServicesDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ServicesDefaultArgs<ExtArgs>>): Prisma.Prisma__ServicesClient<runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  client<T extends Prisma.UsersDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UsersDefaultArgs<ExtArgs>>): Prisma.Prisma__UsersClient<runtime.Types.Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  history<T extends Prisma.Bookings$historyArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Bookings$historyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BookingsHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Bookings model
 */
export interface BookingsFieldRefs {
  readonly id: Prisma.FieldRef<"Bookings", 'String'>
  readonly serviceId: Prisma.FieldRef<"Bookings", 'String'>
  readonly clientId: Prisma.FieldRef<"Bookings", 'String'>
  readonly status: Prisma.FieldRef<"Bookings", 'BookingStatus'>
  readonly createdAt: Prisma.FieldRef<"Bookings", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Bookings", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Bookings findUnique
 */
export type BookingsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bookings
   */
  select?: Prisma.BookingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bookings
   */
  omit?: Prisma.BookingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsInclude<ExtArgs> | null
  /**
   * Filter, which Bookings to fetch.
   */
  where: Prisma.BookingsWhereUniqueInput
}

/**
 * Bookings findUniqueOrThrow
 */
export type BookingsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bookings
   */
  select?: Prisma.BookingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bookings
   */
  omit?: Prisma.BookingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsInclude<ExtArgs> | null
  /**
   * Filter, which Bookings to fetch.
   */
  where: Prisma.BookingsWhereUniqueInput
}

/**
 * Bookings findFirst
 */
export type BookingsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bookings
   */
  select?: Prisma.BookingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bookings
   */
  omit?: Prisma.BookingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsInclude<ExtArgs> | null
  /**
   * Filter, which Bookings to fetch.
   */
  where?: Prisma.BookingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Bookings to fetch.
   */
  orderBy?: Prisma.BookingsOrderByWithRelationInput | Prisma.BookingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Bookings.
   */
  cursor?: Prisma.BookingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Bookings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Bookings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Bookings.
   */
  distinct?: Prisma.BookingsScalarFieldEnum | Prisma.BookingsScalarFieldEnum[]
}

/**
 * Bookings findFirstOrThrow
 */
export type BookingsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bookings
   */
  select?: Prisma.BookingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bookings
   */
  omit?: Prisma.BookingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsInclude<ExtArgs> | null
  /**
   * Filter, which Bookings to fetch.
   */
  where?: Prisma.BookingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Bookings to fetch.
   */
  orderBy?: Prisma.BookingsOrderByWithRelationInput | Prisma.BookingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Bookings.
   */
  cursor?: Prisma.BookingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Bookings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Bookings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Bookings.
   */
  distinct?: Prisma.BookingsScalarFieldEnum | Prisma.BookingsScalarFieldEnum[]
}

/**
 * Bookings findMany
 */
export type BookingsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bookings
   */
  select?: Prisma.BookingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bookings
   */
  omit?: Prisma.BookingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsInclude<ExtArgs> | null
  /**
   * Filter, which Bookings to fetch.
   */
  where?: Prisma.BookingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Bookings to fetch.
   */
  orderBy?: Prisma.BookingsOrderByWithRelationInput | Prisma.BookingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Bookings.
   */
  cursor?: Prisma.BookingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Bookings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Bookings.
   */
  skip?: number
  distinct?: Prisma.BookingsScalarFieldEnum | Prisma.BookingsScalarFieldEnum[]
}

/**
 * Bookings create
 */
export type BookingsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bookings
   */
  select?: Prisma.BookingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bookings
   */
  omit?: Prisma.BookingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsInclude<ExtArgs> | null
  /**
   * The data needed to create a Bookings.
   */
  data: Prisma.XOR<Prisma.BookingsCreateInput, Prisma.BookingsUncheckedCreateInput>
}

/**
 * Bookings createMany
 */
export type BookingsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Bookings.
   */
  data: Prisma.BookingsCreateManyInput | Prisma.BookingsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Bookings createManyAndReturn
 */
export type BookingsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bookings
   */
  select?: Prisma.BookingsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Bookings
   */
  omit?: Prisma.BookingsOmit<ExtArgs> | null
  /**
   * The data used to create many Bookings.
   */
  data: Prisma.BookingsCreateManyInput | Prisma.BookingsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Bookings update
 */
export type BookingsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bookings
   */
  select?: Prisma.BookingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bookings
   */
  omit?: Prisma.BookingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsInclude<ExtArgs> | null
  /**
   * The data needed to update a Bookings.
   */
  data: Prisma.XOR<Prisma.BookingsUpdateInput, Prisma.BookingsUncheckedUpdateInput>
  /**
   * Choose, which Bookings to update.
   */
  where: Prisma.BookingsWhereUniqueInput
}

/**
 * Bookings updateMany
 */
export type BookingsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Bookings.
   */
  data: Prisma.XOR<Prisma.BookingsUpdateManyMutationInput, Prisma.BookingsUncheckedUpdateManyInput>
  /**
   * Filter which Bookings to update
   */
  where?: Prisma.BookingsWhereInput
  /**
   * Limit how many Bookings to update.
   */
  limit?: number
}

/**
 * Bookings updateManyAndReturn
 */
export type BookingsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bookings
   */
  select?: Prisma.BookingsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Bookings
   */
  omit?: Prisma.BookingsOmit<ExtArgs> | null
  /**
   * The data used to update Bookings.
   */
  data: Prisma.XOR<Prisma.BookingsUpdateManyMutationInput, Prisma.BookingsUncheckedUpdateManyInput>
  /**
   * Filter which Bookings to update
   */
  where?: Prisma.BookingsWhereInput
  /**
   * Limit how many Bookings to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Bookings upsert
 */
export type BookingsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bookings
   */
  select?: Prisma.BookingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bookings
   */
  omit?: Prisma.BookingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsInclude<ExtArgs> | null
  /**
   * The filter to search for the Bookings to update in case it exists.
   */
  where: Prisma.BookingsWhereUniqueInput
  /**
   * In case the Bookings found by the `where` argument doesn't exist, create a new Bookings with this data.
   */
  create: Prisma.XOR<Prisma.BookingsCreateInput, Prisma.BookingsUncheckedCreateInput>
  /**
   * In case the Bookings was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BookingsUpdateInput, Prisma.BookingsUncheckedUpdateInput>
}

/**
 * Bookings delete
 */
export type BookingsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bookings
   */
  select?: Prisma.BookingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bookings
   */
  omit?: Prisma.BookingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsInclude<ExtArgs> | null
  /**
   * Filter which Bookings to delete.
   */
  where: Prisma.BookingsWhereUniqueInput
}

/**
 * Bookings deleteMany
 */
export type BookingsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Bookings to delete
   */
  where?: Prisma.BookingsWhereInput
  /**
   * Limit how many Bookings to delete.
   */
  limit?: number
}

/**
 * Bookings.history
 */
export type Bookings$historyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BookingsHistory
   */
  select?: Prisma.BookingsHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the BookingsHistory
   */
  omit?: Prisma.BookingsHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsHistoryInclude<ExtArgs> | null
  where?: Prisma.BookingsHistoryWhereInput
  orderBy?: Prisma.BookingsHistoryOrderByWithRelationInput | Prisma.BookingsHistoryOrderByWithRelationInput[]
  cursor?: Prisma.BookingsHistoryWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.BookingsHistoryScalarFieldEnum | Prisma.BookingsHistoryScalarFieldEnum[]
}

/**
 * Bookings without action
 */
export type BookingsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bookings
   */
  select?: Prisma.BookingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bookings
   */
  omit?: Prisma.BookingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsInclude<ExtArgs> | null
}
