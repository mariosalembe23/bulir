
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `BookingsHistory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model BookingsHistory
 * 
 */
export type BookingsHistoryModel = runtime.Types.Result.DefaultSelection<Prisma.$BookingsHistoryPayload>

export type AggregateBookingsHistory = {
  _count: BookingsHistoryCountAggregateOutputType | null
  _min: BookingsHistoryMinAggregateOutputType | null
  _max: BookingsHistoryMaxAggregateOutputType | null
}

export type BookingsHistoryMinAggregateOutputType = {
  id: string | null
  bookingId: string | null
  status: string | null
  changedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BookingsHistoryMaxAggregateOutputType = {
  id: string | null
  bookingId: string | null
  status: string | null
  changedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BookingsHistoryCountAggregateOutputType = {
  id: number
  bookingId: number
  status: number
  changedAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type BookingsHistoryMinAggregateInputType = {
  id?: true
  bookingId?: true
  status?: true
  changedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type BookingsHistoryMaxAggregateInputType = {
  id?: true
  bookingId?: true
  status?: true
  changedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type BookingsHistoryCountAggregateInputType = {
  id?: true
  bookingId?: true
  status?: true
  changedAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type BookingsHistoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BookingsHistory to aggregate.
   */
  where?: Prisma.BookingsHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BookingsHistories to fetch.
   */
  orderBy?: Prisma.BookingsHistoryOrderByWithRelationInput | Prisma.BookingsHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BookingsHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BookingsHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BookingsHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned BookingsHistories
  **/
  _count?: true | BookingsHistoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BookingsHistoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BookingsHistoryMaxAggregateInputType
}

export type GetBookingsHistoryAggregateType<T extends BookingsHistoryAggregateArgs> = {
      [P in keyof T & keyof AggregateBookingsHistory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBookingsHistory[P]>
    : Prisma.GetScalarType<T[P], AggregateBookingsHistory[P]>
}




export type BookingsHistoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BookingsHistoryWhereInput
  orderBy?: Prisma.BookingsHistoryOrderByWithAggregationInput | Prisma.BookingsHistoryOrderByWithAggregationInput[]
  by: Prisma.BookingsHistoryScalarFieldEnum[] | Prisma.BookingsHistoryScalarFieldEnum
  having?: Prisma.BookingsHistoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BookingsHistoryCountAggregateInputType | true
  _min?: BookingsHistoryMinAggregateInputType
  _max?: BookingsHistoryMaxAggregateInputType
}

export type BookingsHistoryGroupByOutputType = {
  id: string
  bookingId: string
  status: string
  changedAt: Date
  createdAt: Date
  updatedAt: Date
  _count: BookingsHistoryCountAggregateOutputType | null
  _min: BookingsHistoryMinAggregateOutputType | null
  _max: BookingsHistoryMaxAggregateOutputType | null
}

type GetBookingsHistoryGroupByPayload<T extends BookingsHistoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BookingsHistoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BookingsHistoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BookingsHistoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BookingsHistoryGroupByOutputType[P]>
      }
    >
  >



export type BookingsHistoryWhereInput = {
  AND?: Prisma.BookingsHistoryWhereInput | Prisma.BookingsHistoryWhereInput[]
  OR?: Prisma.BookingsHistoryWhereInput[]
  NOT?: Prisma.BookingsHistoryWhereInput | Prisma.BookingsHistoryWhereInput[]
  id?: Prisma.StringFilter<"BookingsHistory"> | string
  bookingId?: Prisma.StringFilter<"BookingsHistory"> | string
  status?: Prisma.StringFilter<"BookingsHistory"> | string
  changedAt?: Prisma.DateTimeFilter<"BookingsHistory"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"BookingsHistory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"BookingsHistory"> | Date | string
  booking?: Prisma.XOR<Prisma.BookingsScalarRelationFilter, Prisma.BookingsWhereInput>
}

export type BookingsHistoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  bookingId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  changedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  booking?: Prisma.BookingsOrderByWithRelationInput
}

export type BookingsHistoryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.BookingsHistoryWhereInput | Prisma.BookingsHistoryWhereInput[]
  OR?: Prisma.BookingsHistoryWhereInput[]
  NOT?: Prisma.BookingsHistoryWhereInput | Prisma.BookingsHistoryWhereInput[]
  bookingId?: Prisma.StringFilter<"BookingsHistory"> | string
  status?: Prisma.StringFilter<"BookingsHistory"> | string
  changedAt?: Prisma.DateTimeFilter<"BookingsHistory"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"BookingsHistory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"BookingsHistory"> | Date | string
  booking?: Prisma.XOR<Prisma.BookingsScalarRelationFilter, Prisma.BookingsWhereInput>
}, "id" | "id">

export type BookingsHistoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  bookingId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  changedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.BookingsHistoryCountOrderByAggregateInput
  _max?: Prisma.BookingsHistoryMaxOrderByAggregateInput
  _min?: Prisma.BookingsHistoryMinOrderByAggregateInput
}

export type BookingsHistoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.BookingsHistoryScalarWhereWithAggregatesInput | Prisma.BookingsHistoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.BookingsHistoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BookingsHistoryScalarWhereWithAggregatesInput | Prisma.BookingsHistoryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"BookingsHistory"> | string
  bookingId?: Prisma.StringWithAggregatesFilter<"BookingsHistory"> | string
  status?: Prisma.StringWithAggregatesFilter<"BookingsHistory"> | string
  changedAt?: Prisma.DateTimeWithAggregatesFilter<"BookingsHistory"> | Date | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"BookingsHistory"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"BookingsHistory"> | Date | string
}

export type BookingsHistoryCreateInput = {
  id?: string
  status: string
  changedAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  booking: Prisma.BookingsCreateNestedOneWithoutHistoryInput
}

export type BookingsHistoryUncheckedCreateInput = {
  id?: string
  bookingId: string
  status: string
  changedAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BookingsHistoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  changedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  booking?: Prisma.BookingsUpdateOneRequiredWithoutHistoryNestedInput
}

export type BookingsHistoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  bookingId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  changedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BookingsHistoryCreateManyInput = {
  id?: string
  bookingId: string
  status: string
  changedAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BookingsHistoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  changedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BookingsHistoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  bookingId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  changedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BookingsHistoryListRelationFilter = {
  every?: Prisma.BookingsHistoryWhereInput
  some?: Prisma.BookingsHistoryWhereInput
  none?: Prisma.BookingsHistoryWhereInput
}

export type BookingsHistoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type BookingsHistoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  bookingId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  changedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BookingsHistoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  bookingId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  changedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BookingsHistoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  bookingId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  changedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BookingsHistoryCreateNestedManyWithoutBookingInput = {
  create?: Prisma.XOR<Prisma.BookingsHistoryCreateWithoutBookingInput, Prisma.BookingsHistoryUncheckedCreateWithoutBookingInput> | Prisma.BookingsHistoryCreateWithoutBookingInput[] | Prisma.BookingsHistoryUncheckedCreateWithoutBookingInput[]
  connectOrCreate?: Prisma.BookingsHistoryCreateOrConnectWithoutBookingInput | Prisma.BookingsHistoryCreateOrConnectWithoutBookingInput[]
  createMany?: Prisma.BookingsHistoryCreateManyBookingInputEnvelope
  connect?: Prisma.BookingsHistoryWhereUniqueInput | Prisma.BookingsHistoryWhereUniqueInput[]
}

export type BookingsHistoryUncheckedCreateNestedManyWithoutBookingInput = {
  create?: Prisma.XOR<Prisma.BookingsHistoryCreateWithoutBookingInput, Prisma.BookingsHistoryUncheckedCreateWithoutBookingInput> | Prisma.BookingsHistoryCreateWithoutBookingInput[] | Prisma.BookingsHistoryUncheckedCreateWithoutBookingInput[]
  connectOrCreate?: Prisma.BookingsHistoryCreateOrConnectWithoutBookingInput | Prisma.BookingsHistoryCreateOrConnectWithoutBookingInput[]
  createMany?: Prisma.BookingsHistoryCreateManyBookingInputEnvelope
  connect?: Prisma.BookingsHistoryWhereUniqueInput | Prisma.BookingsHistoryWhereUniqueInput[]
}

export type BookingsHistoryUpdateManyWithoutBookingNestedInput = {
  create?: Prisma.XOR<Prisma.BookingsHistoryCreateWithoutBookingInput, Prisma.BookingsHistoryUncheckedCreateWithoutBookingInput> | Prisma.BookingsHistoryCreateWithoutBookingInput[] | Prisma.BookingsHistoryUncheckedCreateWithoutBookingInput[]
  connectOrCreate?: Prisma.BookingsHistoryCreateOrConnectWithoutBookingInput | Prisma.BookingsHistoryCreateOrConnectWithoutBookingInput[]
  upsert?: Prisma.BookingsHistoryUpsertWithWhereUniqueWithoutBookingInput | Prisma.BookingsHistoryUpsertWithWhereUniqueWithoutBookingInput[]
  createMany?: Prisma.BookingsHistoryCreateManyBookingInputEnvelope
  set?: Prisma.BookingsHistoryWhereUniqueInput | Prisma.BookingsHistoryWhereUniqueInput[]
  disconnect?: Prisma.BookingsHistoryWhereUniqueInput | Prisma.BookingsHistoryWhereUniqueInput[]
  delete?: Prisma.BookingsHistoryWhereUniqueInput | Prisma.BookingsHistoryWhereUniqueInput[]
  connect?: Prisma.BookingsHistoryWhereUniqueInput | Prisma.BookingsHistoryWhereUniqueInput[]
  update?: Prisma.BookingsHistoryUpdateWithWhereUniqueWithoutBookingInput | Prisma.BookingsHistoryUpdateWithWhereUniqueWithoutBookingInput[]
  updateMany?: Prisma.BookingsHistoryUpdateManyWithWhereWithoutBookingInput | Prisma.BookingsHistoryUpdateManyWithWhereWithoutBookingInput[]
  deleteMany?: Prisma.BookingsHistoryScalarWhereInput | Prisma.BookingsHistoryScalarWhereInput[]
}

export type BookingsHistoryUncheckedUpdateManyWithoutBookingNestedInput = {
  create?: Prisma.XOR<Prisma.BookingsHistoryCreateWithoutBookingInput, Prisma.BookingsHistoryUncheckedCreateWithoutBookingInput> | Prisma.BookingsHistoryCreateWithoutBookingInput[] | Prisma.BookingsHistoryUncheckedCreateWithoutBookingInput[]
  connectOrCreate?: Prisma.BookingsHistoryCreateOrConnectWithoutBookingInput | Prisma.BookingsHistoryCreateOrConnectWithoutBookingInput[]
  upsert?: Prisma.BookingsHistoryUpsertWithWhereUniqueWithoutBookingInput | Prisma.BookingsHistoryUpsertWithWhereUniqueWithoutBookingInput[]
  createMany?: Prisma.BookingsHistoryCreateManyBookingInputEnvelope
  set?: Prisma.BookingsHistoryWhereUniqueInput | Prisma.BookingsHistoryWhereUniqueInput[]
  disconnect?: Prisma.BookingsHistoryWhereUniqueInput | Prisma.BookingsHistoryWhereUniqueInput[]
  delete?: Prisma.BookingsHistoryWhereUniqueInput | Prisma.BookingsHistoryWhereUniqueInput[]
  connect?: Prisma.BookingsHistoryWhereUniqueInput | Prisma.BookingsHistoryWhereUniqueInput[]
  update?: Prisma.BookingsHistoryUpdateWithWhereUniqueWithoutBookingInput | Prisma.BookingsHistoryUpdateWithWhereUniqueWithoutBookingInput[]
  updateMany?: Prisma.BookingsHistoryUpdateManyWithWhereWithoutBookingInput | Prisma.BookingsHistoryUpdateManyWithWhereWithoutBookingInput[]
  deleteMany?: Prisma.BookingsHistoryScalarWhereInput | Prisma.BookingsHistoryScalarWhereInput[]
}

export type BookingsHistoryCreateWithoutBookingInput = {
  id?: string
  status: string
  changedAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BookingsHistoryUncheckedCreateWithoutBookingInput = {
  id?: string
  status: string
  changedAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BookingsHistoryCreateOrConnectWithoutBookingInput = {
  where: Prisma.BookingsHistoryWhereUniqueInput
  create: Prisma.XOR<Prisma.BookingsHistoryCreateWithoutBookingInput, Prisma.BookingsHistoryUncheckedCreateWithoutBookingInput>
}

export type BookingsHistoryCreateManyBookingInputEnvelope = {
  data: Prisma.BookingsHistoryCreateManyBookingInput | Prisma.BookingsHistoryCreateManyBookingInput[]
  skipDuplicates?: boolean
}

export type BookingsHistoryUpsertWithWhereUniqueWithoutBookingInput = {
  where: Prisma.BookingsHistoryWhereUniqueInput
  update: Prisma.XOR<Prisma.BookingsHistoryUpdateWithoutBookingInput, Prisma.BookingsHistoryUncheckedUpdateWithoutBookingInput>
  create: Prisma.XOR<Prisma.BookingsHistoryCreateWithoutBookingInput, Prisma.BookingsHistoryUncheckedCreateWithoutBookingInput>
}

export type BookingsHistoryUpdateWithWhereUniqueWithoutBookingInput = {
  where: Prisma.BookingsHistoryWhereUniqueInput
  data: Prisma.XOR<Prisma.BookingsHistoryUpdateWithoutBookingInput, Prisma.BookingsHistoryUncheckedUpdateWithoutBookingInput>
}

export type BookingsHistoryUpdateManyWithWhereWithoutBookingInput = {
  where: Prisma.BookingsHistoryScalarWhereInput
  data: Prisma.XOR<Prisma.BookingsHistoryUpdateManyMutationInput, Prisma.BookingsHistoryUncheckedUpdateManyWithoutBookingInput>
}

export type BookingsHistoryScalarWhereInput = {
  AND?: Prisma.BookingsHistoryScalarWhereInput | Prisma.BookingsHistoryScalarWhereInput[]
  OR?: Prisma.BookingsHistoryScalarWhereInput[]
  NOT?: Prisma.BookingsHistoryScalarWhereInput | Prisma.BookingsHistoryScalarWhereInput[]
  id?: Prisma.StringFilter<"BookingsHistory"> | string
  bookingId?: Prisma.StringFilter<"BookingsHistory"> | string
  status?: Prisma.StringFilter<"BookingsHistory"> | string
  changedAt?: Prisma.DateTimeFilter<"BookingsHistory"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"BookingsHistory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"BookingsHistory"> | Date | string
}

export type BookingsHistoryCreateManyBookingInput = {
  id?: string
  status: string
  changedAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BookingsHistoryUpdateWithoutBookingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  changedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BookingsHistoryUncheckedUpdateWithoutBookingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  changedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BookingsHistoryUncheckedUpdateManyWithoutBookingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  changedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type BookingsHistorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  bookingId?: boolean
  status?: boolean
  changedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  booking?: boolean | Prisma.BookingsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["bookingsHistory"]>

export type BookingsHistorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  bookingId?: boolean
  status?: boolean
  changedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  booking?: boolean | Prisma.BookingsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["bookingsHistory"]>

export type BookingsHistorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  bookingId?: boolean
  status?: boolean
  changedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  booking?: boolean | Prisma.BookingsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["bookingsHistory"]>

export type BookingsHistorySelectScalar = {
  id?: boolean
  bookingId?: boolean
  status?: boolean
  changedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type BookingsHistoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "bookingId" | "status" | "changedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["bookingsHistory"]>
export type BookingsHistoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  booking?: boolean | Prisma.BookingsDefaultArgs<ExtArgs>
}
export type BookingsHistoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  booking?: boolean | Prisma.BookingsDefaultArgs<ExtArgs>
}
export type BookingsHistoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  booking?: boolean | Prisma.BookingsDefaultArgs<ExtArgs>
}

export type $BookingsHistoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "BookingsHistory"
  objects: {
    booking: Prisma.$BookingsPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    bookingId: string
    status: string
    changedAt: Date
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["bookingsHistory"]>
  composites: {}
}

export type BookingsHistoryGetPayload<S extends boolean | null | undefined | BookingsHistoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BookingsHistoryPayload, S>

export type BookingsHistoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BookingsHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BookingsHistoryCountAggregateInputType | true
  }

export interface BookingsHistoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BookingsHistory'], meta: { name: 'BookingsHistory' } }
  /**
   * Find zero or one BookingsHistory that matches the filter.
   * @param {BookingsHistoryFindUniqueArgs} args - Arguments to find a BookingsHistory
   * @example
   * // Get one BookingsHistory
   * const bookingsHistory = await prisma.bookingsHistory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BookingsHistoryFindUniqueArgs>(args: Prisma.SelectSubset<T, BookingsHistoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BookingsHistoryClient<runtime.Types.Result.GetResult<Prisma.$BookingsHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one BookingsHistory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BookingsHistoryFindUniqueOrThrowArgs} args - Arguments to find a BookingsHistory
   * @example
   * // Get one BookingsHistory
   * const bookingsHistory = await prisma.bookingsHistory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BookingsHistoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BookingsHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BookingsHistoryClient<runtime.Types.Result.GetResult<Prisma.$BookingsHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BookingsHistory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingsHistoryFindFirstArgs} args - Arguments to find a BookingsHistory
   * @example
   * // Get one BookingsHistory
   * const bookingsHistory = await prisma.bookingsHistory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BookingsHistoryFindFirstArgs>(args?: Prisma.SelectSubset<T, BookingsHistoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__BookingsHistoryClient<runtime.Types.Result.GetResult<Prisma.$BookingsHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BookingsHistory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingsHistoryFindFirstOrThrowArgs} args - Arguments to find a BookingsHistory
   * @example
   * // Get one BookingsHistory
   * const bookingsHistory = await prisma.bookingsHistory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BookingsHistoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BookingsHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BookingsHistoryClient<runtime.Types.Result.GetResult<Prisma.$BookingsHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more BookingsHistories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingsHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BookingsHistories
   * const bookingsHistories = await prisma.bookingsHistory.findMany()
   * 
   * // Get first 10 BookingsHistories
   * const bookingsHistories = await prisma.bookingsHistory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const bookingsHistoryWithIdOnly = await prisma.bookingsHistory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BookingsHistoryFindManyArgs>(args?: Prisma.SelectSubset<T, BookingsHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BookingsHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a BookingsHistory.
   * @param {BookingsHistoryCreateArgs} args - Arguments to create a BookingsHistory.
   * @example
   * // Create one BookingsHistory
   * const BookingsHistory = await prisma.bookingsHistory.create({
   *   data: {
   *     // ... data to create a BookingsHistory
   *   }
   * })
   * 
   */
  create<T extends BookingsHistoryCreateArgs>(args: Prisma.SelectSubset<T, BookingsHistoryCreateArgs<ExtArgs>>): Prisma.Prisma__BookingsHistoryClient<runtime.Types.Result.GetResult<Prisma.$BookingsHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many BookingsHistories.
   * @param {BookingsHistoryCreateManyArgs} args - Arguments to create many BookingsHistories.
   * @example
   * // Create many BookingsHistories
   * const bookingsHistory = await prisma.bookingsHistory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BookingsHistoryCreateManyArgs>(args?: Prisma.SelectSubset<T, BookingsHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many BookingsHistories and returns the data saved in the database.
   * @param {BookingsHistoryCreateManyAndReturnArgs} args - Arguments to create many BookingsHistories.
   * @example
   * // Create many BookingsHistories
   * const bookingsHistory = await prisma.bookingsHistory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many BookingsHistories and only return the `id`
   * const bookingsHistoryWithIdOnly = await prisma.bookingsHistory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BookingsHistoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BookingsHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BookingsHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a BookingsHistory.
   * @param {BookingsHistoryDeleteArgs} args - Arguments to delete one BookingsHistory.
   * @example
   * // Delete one BookingsHistory
   * const BookingsHistory = await prisma.bookingsHistory.delete({
   *   where: {
   *     // ... filter to delete one BookingsHistory
   *   }
   * })
   * 
   */
  delete<T extends BookingsHistoryDeleteArgs>(args: Prisma.SelectSubset<T, BookingsHistoryDeleteArgs<ExtArgs>>): Prisma.Prisma__BookingsHistoryClient<runtime.Types.Result.GetResult<Prisma.$BookingsHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one BookingsHistory.
   * @param {BookingsHistoryUpdateArgs} args - Arguments to update one BookingsHistory.
   * @example
   * // Update one BookingsHistory
   * const bookingsHistory = await prisma.bookingsHistory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BookingsHistoryUpdateArgs>(args: Prisma.SelectSubset<T, BookingsHistoryUpdateArgs<ExtArgs>>): Prisma.Prisma__BookingsHistoryClient<runtime.Types.Result.GetResult<Prisma.$BookingsHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more BookingsHistories.
   * @param {BookingsHistoryDeleteManyArgs} args - Arguments to filter BookingsHistories to delete.
   * @example
   * // Delete a few BookingsHistories
   * const { count } = await prisma.bookingsHistory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BookingsHistoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, BookingsHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BookingsHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingsHistoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BookingsHistories
   * const bookingsHistory = await prisma.bookingsHistory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BookingsHistoryUpdateManyArgs>(args: Prisma.SelectSubset<T, BookingsHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BookingsHistories and returns the data updated in the database.
   * @param {BookingsHistoryUpdateManyAndReturnArgs} args - Arguments to update many BookingsHistories.
   * @example
   * // Update many BookingsHistories
   * const bookingsHistory = await prisma.bookingsHistory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more BookingsHistories and only return the `id`
   * const bookingsHistoryWithIdOnly = await prisma.bookingsHistory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BookingsHistoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BookingsHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BookingsHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one BookingsHistory.
   * @param {BookingsHistoryUpsertArgs} args - Arguments to update or create a BookingsHistory.
   * @example
   * // Update or create a BookingsHistory
   * const bookingsHistory = await prisma.bookingsHistory.upsert({
   *   create: {
   *     // ... data to create a BookingsHistory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BookingsHistory we want to update
   *   }
   * })
   */
  upsert<T extends BookingsHistoryUpsertArgs>(args: Prisma.SelectSubset<T, BookingsHistoryUpsertArgs<ExtArgs>>): Prisma.Prisma__BookingsHistoryClient<runtime.Types.Result.GetResult<Prisma.$BookingsHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of BookingsHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingsHistoryCountArgs} args - Arguments to filter BookingsHistories to count.
   * @example
   * // Count the number of BookingsHistories
   * const count = await prisma.bookingsHistory.count({
   *   where: {
   *     // ... the filter for the BookingsHistories we want to count
   *   }
   * })
  **/
  count<T extends BookingsHistoryCountArgs>(
    args?: Prisma.Subset<T, BookingsHistoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BookingsHistoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a BookingsHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingsHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BookingsHistoryAggregateArgs>(args: Prisma.Subset<T, BookingsHistoryAggregateArgs>): Prisma.PrismaPromise<GetBookingsHistoryAggregateType<T>>

  /**
   * Group by BookingsHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingsHistoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BookingsHistoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BookingsHistoryGroupByArgs['orderBy'] }
      : { orderBy?: BookingsHistoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BookingsHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingsHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the BookingsHistory model
 */
readonly fields: BookingsHistoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BookingsHistory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BookingsHistoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  booking<T extends Prisma.BookingsDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BookingsDefaultArgs<ExtArgs>>): Prisma.Prisma__BookingsClient<runtime.Types.Result.GetResult<Prisma.$BookingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the BookingsHistory model
 */
export interface BookingsHistoryFieldRefs {
  readonly id: Prisma.FieldRef<"BookingsHistory", 'String'>
  readonly bookingId: Prisma.FieldRef<"BookingsHistory", 'String'>
  readonly status: Prisma.FieldRef<"BookingsHistory", 'String'>
  readonly changedAt: Prisma.FieldRef<"BookingsHistory", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"BookingsHistory", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"BookingsHistory", 'DateTime'>
}
    

// Custom InputTypes
/**
 * BookingsHistory findUnique
 */
export type BookingsHistoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BookingsHistory
   */
  select?: Prisma.BookingsHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the BookingsHistory
   */
  omit?: Prisma.BookingsHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsHistoryInclude<ExtArgs> | null
  /**
   * Filter, which BookingsHistory to fetch.
   */
  where: Prisma.BookingsHistoryWhereUniqueInput
}

/**
 * BookingsHistory findUniqueOrThrow
 */
export type BookingsHistoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BookingsHistory
   */
  select?: Prisma.BookingsHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the BookingsHistory
   */
  omit?: Prisma.BookingsHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsHistoryInclude<ExtArgs> | null
  /**
   * Filter, which BookingsHistory to fetch.
   */
  where: Prisma.BookingsHistoryWhereUniqueInput
}

/**
 * BookingsHistory findFirst
 */
export type BookingsHistoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BookingsHistory
   */
  select?: Prisma.BookingsHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the BookingsHistory
   */
  omit?: Prisma.BookingsHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsHistoryInclude<ExtArgs> | null
  /**
   * Filter, which BookingsHistory to fetch.
   */
  where?: Prisma.BookingsHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BookingsHistories to fetch.
   */
  orderBy?: Prisma.BookingsHistoryOrderByWithRelationInput | Prisma.BookingsHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BookingsHistories.
   */
  cursor?: Prisma.BookingsHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BookingsHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BookingsHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BookingsHistories.
   */
  distinct?: Prisma.BookingsHistoryScalarFieldEnum | Prisma.BookingsHistoryScalarFieldEnum[]
}

/**
 * BookingsHistory findFirstOrThrow
 */
export type BookingsHistoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BookingsHistory
   */
  select?: Prisma.BookingsHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the BookingsHistory
   */
  omit?: Prisma.BookingsHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsHistoryInclude<ExtArgs> | null
  /**
   * Filter, which BookingsHistory to fetch.
   */
  where?: Prisma.BookingsHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BookingsHistories to fetch.
   */
  orderBy?: Prisma.BookingsHistoryOrderByWithRelationInput | Prisma.BookingsHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BookingsHistories.
   */
  cursor?: Prisma.BookingsHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BookingsHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BookingsHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BookingsHistories.
   */
  distinct?: Prisma.BookingsHistoryScalarFieldEnum | Prisma.BookingsHistoryScalarFieldEnum[]
}

/**
 * BookingsHistory findMany
 */
export type BookingsHistoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BookingsHistory
   */
  select?: Prisma.BookingsHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the BookingsHistory
   */
  omit?: Prisma.BookingsHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsHistoryInclude<ExtArgs> | null
  /**
   * Filter, which BookingsHistories to fetch.
   */
  where?: Prisma.BookingsHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BookingsHistories to fetch.
   */
  orderBy?: Prisma.BookingsHistoryOrderByWithRelationInput | Prisma.BookingsHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing BookingsHistories.
   */
  cursor?: Prisma.BookingsHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BookingsHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BookingsHistories.
   */
  skip?: number
  distinct?: Prisma.BookingsHistoryScalarFieldEnum | Prisma.BookingsHistoryScalarFieldEnum[]
}

/**
 * BookingsHistory create
 */
export type BookingsHistoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BookingsHistory
   */
  select?: Prisma.BookingsHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the BookingsHistory
   */
  omit?: Prisma.BookingsHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsHistoryInclude<ExtArgs> | null
  /**
   * The data needed to create a BookingsHistory.
   */
  data: Prisma.XOR<Prisma.BookingsHistoryCreateInput, Prisma.BookingsHistoryUncheckedCreateInput>
}

/**
 * BookingsHistory createMany
 */
export type BookingsHistoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many BookingsHistories.
   */
  data: Prisma.BookingsHistoryCreateManyInput | Prisma.BookingsHistoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * BookingsHistory createManyAndReturn
 */
export type BookingsHistoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BookingsHistory
   */
  select?: Prisma.BookingsHistorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BookingsHistory
   */
  omit?: Prisma.BookingsHistoryOmit<ExtArgs> | null
  /**
   * The data used to create many BookingsHistories.
   */
  data: Prisma.BookingsHistoryCreateManyInput | Prisma.BookingsHistoryCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsHistoryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * BookingsHistory update
 */
export type BookingsHistoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BookingsHistory
   */
  select?: Prisma.BookingsHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the BookingsHistory
   */
  omit?: Prisma.BookingsHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsHistoryInclude<ExtArgs> | null
  /**
   * The data needed to update a BookingsHistory.
   */
  data: Prisma.XOR<Prisma.BookingsHistoryUpdateInput, Prisma.BookingsHistoryUncheckedUpdateInput>
  /**
   * Choose, which BookingsHistory to update.
   */
  where: Prisma.BookingsHistoryWhereUniqueInput
}

/**
 * BookingsHistory updateMany
 */
export type BookingsHistoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update BookingsHistories.
   */
  data: Prisma.XOR<Prisma.BookingsHistoryUpdateManyMutationInput, Prisma.BookingsHistoryUncheckedUpdateManyInput>
  /**
   * Filter which BookingsHistories to update
   */
  where?: Prisma.BookingsHistoryWhereInput
  /**
   * Limit how many BookingsHistories to update.
   */
  limit?: number
}

/**
 * BookingsHistory updateManyAndReturn
 */
export type BookingsHistoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BookingsHistory
   */
  select?: Prisma.BookingsHistorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BookingsHistory
   */
  omit?: Prisma.BookingsHistoryOmit<ExtArgs> | null
  /**
   * The data used to update BookingsHistories.
   */
  data: Prisma.XOR<Prisma.BookingsHistoryUpdateManyMutationInput, Prisma.BookingsHistoryUncheckedUpdateManyInput>
  /**
   * Filter which BookingsHistories to update
   */
  where?: Prisma.BookingsHistoryWhereInput
  /**
   * Limit how many BookingsHistories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * BookingsHistory upsert
 */
export type BookingsHistoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BookingsHistory
   */
  select?: Prisma.BookingsHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the BookingsHistory
   */
  omit?: Prisma.BookingsHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsHistoryInclude<ExtArgs> | null
  /**
   * The filter to search for the BookingsHistory to update in case it exists.
   */
  where: Prisma.BookingsHistoryWhereUniqueInput
  /**
   * In case the BookingsHistory found by the `where` argument doesn't exist, create a new BookingsHistory with this data.
   */
  create: Prisma.XOR<Prisma.BookingsHistoryCreateInput, Prisma.BookingsHistoryUncheckedCreateInput>
  /**
   * In case the BookingsHistory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BookingsHistoryUpdateInput, Prisma.BookingsHistoryUncheckedUpdateInput>
}

/**
 * BookingsHistory delete
 */
export type BookingsHistoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BookingsHistory
   */
  select?: Prisma.BookingsHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the BookingsHistory
   */
  omit?: Prisma.BookingsHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsHistoryInclude<ExtArgs> | null
  /**
   * Filter which BookingsHistory to delete.
   */
  where: Prisma.BookingsHistoryWhereUniqueInput
}

/**
 * BookingsHistory deleteMany
 */
export type BookingsHistoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BookingsHistories to delete
   */
  where?: Prisma.BookingsHistoryWhereInput
  /**
   * Limit how many BookingsHistories to delete.
   */
  limit?: number
}

/**
 * BookingsHistory without action
 */
export type BookingsHistoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BookingsHistory
   */
  select?: Prisma.BookingsHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the BookingsHistory
   */
  omit?: Prisma.BookingsHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsHistoryInclude<ExtArgs> | null
}
