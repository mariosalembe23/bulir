generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        String     @id @unique @default(uuid())
  name      String
  email     String     @unique
  password  String
  nif       String     @unique
  role      Role       @default(CLIENT)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  balance   Float      @default(0)
  bookings  Bookings[]
  services  Services[]

  @@map("users")
}

model Services {
  id          String     @id @unique @default(uuid())
  userId      String?    @map("user_id")
  title       String
  description String
  price       Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Bookings    Bookings[]
  user        Users?     @relation(fields: [userId], references: [id])

  @@map("services")
}

model Bookings {
  id        String            @id @unique @default(uuid())
  serviceId String            @map("service_id")
  clientId  String            @map("client_id")
  status    BookingStatus     @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  date      DateTime
  client    Users             @relation(fields: [clientId], references: [id])
  service   Services          @relation(fields: [serviceId], references: [id])
  history   BookingsHistory[]

  @@map("bookings")
}

model BookingsHistory {
  id        String   @id @unique @default(uuid())
  bookingId String   @map("booking_id")
  status    String
  changedAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  booking   Bookings @relation(fields: [bookingId], references: [id])

  @@map("bookings_history")
}

enum Role {
  CLIENT
  PROVIDER
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
}
